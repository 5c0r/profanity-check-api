public class ContentCheckServiceInvoker implements Queueable, Database.AllowsCallouts {
    public static Set<string> TextExtensions = new Set<string> { 'txt', 'csv', 'log' };
        
    private String contentDocumentId;
    
    public ContentCheckServiceInvoker(String contentDocumentId)
    {
        this.contentDocumentId = contentDocumentId;
    }
    
    public void execute(QueueableContext context) {
        try
        {
            ContentVersion currentContentVersion = [SELECT VersionData,FileExtension,OwnerId,PathOnClient FROM ContentVersion WHERE IsLatest = true AND ContentDocumentID = :this.contentDocumentId];
            ContentDocument currentDocument = [SELECT OwnerId FROM ContentDocument WHERE Id = :this.contentDocumentId];
            
            HttpResponse response = this.uploadFile(currentContentVersion.VersionData, currentContentVersion.PathOnClient, GlobalConfiguration.CONTENTCHECK_API);
            
            Integer statusCode = response.getStatusCode();
            
            if(statusCode == 200)
            {
                ProfanityCheckResponse profanityCheckResult = (ProfanityCheckResponse)JSON.deserializeStrict(response.getBody(), ProfanityCheckResponse.class);

                if( profanityCheckResult.data.violatedWords.size() > 0)
                {
                	this.notifyEmailToOwner(currentContentVersion.OwnerId, currentContentVersion.PathOnClient,currentContentVersion.VersionData, profanityCheckResult.data.violatedWords);
					this.pernamentDeleteDocument(currentDocument);
                }
            }
            else
            {
                System.debug('Error occured while checking profanity. Status code returns ' + statusCode);
            }
            
        }
        catch(Exception ex)
        {
            System.debug('Error ' + ex.getMessage() + ex.getStackTraceString());
        }
        
        System.debug('request sent');
    }
    
    
    private HttpResponse uploadFile(Blob file_body, String file_name, String reqEndPoint){
        // http://enreeco.blogspot.in/2013/01/salesforce-apex-post-mutipartform-data.html
        // http://salesforce.stackexchange.com/questions/24108/post-multipart-without-base64-encoding-the-body
        String boundary = '----------------------------741e90d31eff';
        String header = '--'+boundary+'\r\nContent-Disposition: form-data; name="file"; filename="'+file_name+'"\r\nContent-Type: application/octet-stream'; // added '\r's removed ';' see Tim Smith's comment
        String footer = '\r\n--'+boundary+'--';              
        String headerEncoded = EncodingUtil.base64Encode(Blob.valueOf(header+'\r\n\r\n'));
        while(headerEncoded.endsWith('='))
        {
            header+=' ';
            headerEncoded = EncodingUtil.base64Encode(Blob.valueOf(header+'\r\n\r\n'));
        }
        String bodyEncoded = EncodingUtil.base64Encode(file_body);
        String footerEncoded = EncodingUtil.base64Encode(Blob.valueOf(footer));
        
        Blob bodyBlob = null;
        String last4Bytes = bodyEncoded.substring(bodyEncoded.length()-4,bodyEncoded.length());
        if(last4Bytes.endsWith('='))
        {
            Blob decoded4Bytes = EncodingUtil.base64Decode(last4Bytes);
            HttpRequest tmp = new HttpRequest();
            tmp.setBodyAsBlob(decoded4Bytes);
            String last4BytesFooter = tmp.getBody()+footer;   
            bodyBlob = EncodingUtil.base64Decode(headerEncoded+bodyEncoded.substring(0,bodyEncoded.length()-4)+EncodingUtil.base64Encode(Blob.valueOf(last4BytesFooter)));
        }
        else
        {
            bodyBlob = EncodingUtil.base64Decode(headerEncoded+bodyEncoded+footerEncoded);
        }
        
        HttpRequest req = new HttpRequest();
        req.setHeader('Content-Type','multipart/form-data; boundary='+boundary);
        req.setMethod('POST');
        req.setEndpoint(reqEndPoint);
        req.setBodyAsBlob(bodyBlob);
        req.setTimeout(120000);
        
        Http http = new Http();
        HTTPResponse res = http.send(req);
        
        return res;
    }   
    
    private void pernamentDeleteDocument(ContentDocument currentDocument )
    {
        delete currentDocument;
        Database.emptyRecycleBin(currentDocument);
    }
    
    // TODO: Possible using email templates , does not work while sending email to Outlook Addresses..
    private void notifyEmailToOwner(string ownerId, string fileName, Blob fileContent, List<String> violatedWords) {
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        mail.toaddresses = new String[] { ownerId };
        mail.setSenderDisplayName('TestOrg Guard Trigger');
        mail.setSubject('Violated words in your email');
        mail.setSaveAsActivity(false);
        mail.setHtmlBody('Hello Tester, you have many violated words ' + String.join(violatedWords,',') + ' in your document ' + fileName + '. The file will be removed automatically' );

        Messaging.EmailFileAttachment attachment = new Messaging.EmailFileAttachment();
        attachment.setFileName(fileName);
        attachment.setBody(fileContent);
        // setcontenttype
        mail.setFileAttachments(new List<Messaging.EmailFileAttachment> { attachment });
        
        Messaging.SendEmailResult[] results = Messaging.sendEmail(new List<Messaging.Email> { mail });
    }
}